#+EXPORT_FILE_NAME: emacs_config
#+TITLE: emacs configuration
#+startup: indent fold

* Package Sources and Inits
Try ~package-refresh-contents~ as a quickfix when a package is not found.
** archives
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("gnu" . "https://elpa.gnu.org/packages/") 
                           ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** settings and inits
#+BEGIN_SRC emacs-lisp
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
    (require 'package)
    (unless package-archive-contents
      (package-refresh-contents))
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
#+END_SRC

** appearance
*** disable splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

*** disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** disable scroll bar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC

*** Opacity
Set with ~alpha~ (``This parameter specifies the opacity of the frame,
on graphical displays that support variable opacity. It should be an
integer between 0 and 100, where 0 means completely transparent and
100 means completely opaque. It can also have a nil value, which tells
Emacs not to set the frame opacity (leaving it to the window
manager).'' [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-and-Color-Parameters.html][Font and Color Parameters]]) 
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(98 . 94))
  (add-to-list 'default-frame-alist '(alpha . (98 . 85)))
#+end_src

*** fullscreen on startup
#+begin_src elisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

*** modeline
#+begin_src elisp
  (use-package simple-modeline
  :ensure t
  :hook (after-init . simple-modeline-mode))
#+end_src
*** themes
#+begin_src elisp
  (use-package nimbus-theme
    :ensure t)
  (use-package slime-theme
    :ensure t)
  (use-package gandalf-theme
    :ensure t)
#+end_src
** encoding and keyboard
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC


* Globals Settings

** global
#+BEGIN_SRC emacs-lisp
  ;; turn off #?!&/!!-bell
  (setq ring-bell-function 'ignore)
  ;; show row AND col in the status line
  (setq column-number-mode t)
  ;; always auto-revert
  (global-auto-revert-mode 1)
#+END_SRC

** global enables
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (electric-pair-mode 1)
  (show-paren-mode 1)
#+END_SRC

** key-bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") 'switch-to-buffer)
  (global-set-key (kbd "C-c i") 'ibuffer)
#+END_SRC

Latex related
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-p") 'latex-math-preview-expression)
#+END_SRC

Recentf bind to openfiles
#+begin_src elisp
  (global-set-key (kbd "C-c o") 'recentf-open-files)
#+end_src

Convenience keybindings
#+begin_src elisp
  (global-set-key (kbd "C-c C-l") 'eww-follow-link)
#+end_src


* Custom Variables
#+begin_src elisp
  (defcustom buoso/configuration-pedantry-mode nil
    "Set the level of pedantry throughout the configuration.

  It will be used as an indicator on how to inform consumers about discovered issues.
  Recognized values are `pedantic', `relaxed', and `yolo'.")

  (defalias 'buoso/error 'error
    "Custom error function.")

  (defalias 'buoso/warn 'warn
    "Custom warning function.")

  (defalias 'buoso/info 'message
    "Custom info function.")

  ((lambda ()
    (cond
     ((eq buoso/configuration-pedantry-mode 'pedantic)
      (defalias 'buoso/error 'error)
      (defalias 'buoso/warn 'error))
     ((eq buoso/configuration-pedantry-mode 'relaxed)
      (defalias 'buoso/error 'warn)
      (defalias 'buoso/warn 'warn))
     ((eq buoso/configuration-pedantry-mode 'yolo)
      (defalias 'buoso/error 'message)
      (defalias 'buoso/warn 'message)))))

#+end_src

#+begin_src elisp
  (defun buoso/variable-set-p (variable)
    "Return t if VARIABLE defined nil otherwise.

  An additional information will be made available with `buoso/warn'."
    (if (boundp variable)
        t
      (progn
        (buoso/warn (format "The variable '%s' is not defined. Set it in your 'init.el' or '.emacs' config file." variable))
        nil)))

  (defun buoso/file-exists-p (file)
    "Return t if the variable FILE is define and the its path exists, nil otherwise.

  Checks the varaible by means of `buoso/variable-set-p'.
  Note: this works with both variables and string literals to file paths."
    (and (buoso/variable-set-p file)
         (file-exists-p (eval file))))
#+end_src

#+begin_src elisp
  (buoso/variable-set-p 'buoso/omnisharp-server-location)
  (buoso/variable-set-p 'buoso/plantuml-jar-path)
  (buoso/variable-set-p 'buoso/ditaa-jar-path)
  (buoso/variable-set-p 'buoso/ditaa-eps-jar-path)
  (buoso/variable-set-p '*bib-files*)
#+end_src


* Mode and Backend settings
** org-mode
Require some dependencies
#+begin_src elisp
  (use-package org-bullets
    :ensure t)
  (use-package org-ref
    :ensure t)
  (use-package ob-async
    :ensure t)
  (use-package org-contrib
    :ensure t)
  (use-package ox-twbs
    :ensure t)
  (use-package ob-async
    :ensure t)
  (use-package visual-fill-column
    :ensure t)
#+end_src

#+BEGIN_SRC emacs-lisp
  (defun buoso/org-init ()
    "Only require the packages related to 'org-mode' when using org."
    (let ((org-requirements '(org-bullets org-contrib ox ox-publish ox-latex
                                          ox-beamer ox-twbs ox-extra ob-async)))
      (dolist (req org-requirements)
        (require req))))

  (defun buoso/org-visual-column-linum ()
    "Appearance configurations for 'org-mode'."
    (progn
      (setq-default visual-fill-column-width 120)
      (setq-default visual-fill-column-center-text t)
      (setq org-list-allow-alphabetical t)
      (visual-fill-column-mode)
      (visual-line-mode)
      (display-line-numbers-mode -1)))

  (defun buoso/org-settings ()
    "Consider this for more uncategorized settings like the src-window."
    (setq org-src-window-setup "current-window"))

  (defun buoso/org-publishing ()
    "Publishing specific settings."
    (setq org-publish-project-alist
          '(("org-notes"
             :base-directory "~/org/"
             :base-extension "org"
             :publishing-directory "~/public_html/"
             :recursive t
             :publishing-function org-twbs-publish-to-html
             :with-sub-superscript nil
             :headline-levels 4
             :auto-preamble t
             )
            ("org-static"
             :base-directory "~/org/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
             :publishing-directory "~/public_html/"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("org" :components ("org-notes" "org-static")))))

  (defun buoso/org-babel-lang ()
    "Which languages shall be loaded into babel."
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((latex . t)
       (gnuplot . t)
       (python . t)
       (C . t)
       (lisp . t)
       (ditaa . t))))

  (defun buoso/eval-w/o-confirmation ()
    "Languages in the list don't require confirmation to be executed."
    (let ((confirmed-babel-langs (lambda (lang body)
                                   (not (or
                                         (string= lang "emacs-lisp")
                                         (string= lang "latex")
                                         (string= lang "elisp")
                                         (string= lang "lisp")
                                         (string= lang "gnuplot")
                                         (string= lang "python")
                                         (string= lang "dot")
                                         (string= lang "C++")
                                         (string= lang "ditaa"))))))
      (setq org-confirm-babel-evaluate confirmed-babel-langs)))


  (use-package org
    :init (buoso/org-init)
    :mode (("\\.org$" . org-mode))  
    :ensure t
    :hook
    (org-mode . org-bullets-mode)
    (org-mode . buoso/org-visual-column-linum)
    (org-mode . buoso/org-publishing)
    (org-mode . buoso/org-babel-lang)
    (org-mode . buoso/eval-w/o-confirmation)
    (org-mode . buoso/org-settings)
    :config
    (setq org-highest-priority ?A)
    (setq org-lowest-priority ?C)
    (setq org-default-priority ?A)
    (setq org-priority-faces '((?A . (:foreground "FF6670" :weight bold))
                               (?B . (:foreground "F8FF42"))
                               (?C . (:foreground "60FFFF"))))
    (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
    (setq org-babel-lisp-eval-fn 'sly-eval)
    (setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
    :bind
    (("C-c a" . 'org-agenda)
     ("C-c l" . 'org-store-link)
     ("C-c c" . 'org-capture)))
#+END_SRC

Add additional html-export that embeds images into the generated html.
Mostly copied from [[https://niklasfasching.de/posts/org-html-export-inline-images/]]
#+begin_src elisp
  (defun org-html-export-to-mhtml (async subtree visible body)
    (cl-letf (((symbol-function 'org-html--format-image) 'format-image-inline))
      (org-html-export-to-html nil subtree visible body)))

  (defun format-image-inline (source attributes info)
    (let* ((ext (file-name-extension source))
           (prefix (if (string= "svg" ext) "data:image/svg+xml;base64," "data:;base64,"))
           (data (with-temp-buffer (url-insert-file-contents source) (buffer-string)))
           (data-url (concat prefix (base64-encode-string data)))
           (attributes (org-combine-plists `(:src ,data-url) attributes)))
      (org-html-close-tag "img" (org-html--make-attribute-string attributes) info)))

  (org-export-define-derived-backend 'html-inline-images 'html
    :menu-entry '(?h "Export to HTML" ((?m "As MHTML file" org-html-export-to-mhtml))))

  (org-export-define-derived-backend 'html-inline-imgaes 'html
    :menu-entry '(?h "Export to HTML" ((?M "As MHTML file and open"
                                           (lambda (a s v b)
                                             (if a (org-html-export-to-mhtml t s v b)
                                               (org-open-file (org-html-export-to-mhtml nil s v b))))))))
#+end_src

** org-modern
This is just meant to fetch org-modern. The configuration is done in the ~:config~ section of [[*org-mode][org-mode]]
#+begin_src elisp
  (use-package org-modern
    :ensure t
    :after org
    :config
    (global-org-modern-mode))
#+end_src

** ivy
#+begin_src elisp
  (use-package ivy
    :ensure t)
  (use-package ivy-bibtex
    :ensure t)
#+end_src
** org-ref
Configuration copied from [[https://github.com/jkitchin/org-ref][jkitchin/org-ref]]. Append bib files to the *bib-files* list.
#+BEGIN_SRC emacs-lisp
  ;; Add bib-files to the bibtex-completion list if they can be found
  (use-package org-ref
    :ensure t
    :after org
    :init
    (require 'org-ref-ivy)
    :config
    (when (and (buoso/variable-set-p '*bib-files*)
               (not (null *bib-files*)))
      (dolist (file *bib-files*)
        (if (and (file-exists-p file) (not (member file bibtex-completion-bibliography)))
            (push file bibtex-completion-bibliography))))
    (if bibtex-completion-bibliography
        (progn
          (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
                org-ref-insert-cite-function 'org-ref-cite-insert-ivy
                org-ref-insert-label-function 'org-ref-insert-label-link
                org-ref-insert-ref-function 'org-ref-insert-ref-link
                org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
          (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
          (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body))))
#+END_SRC

** org-roam
On windows [[https://www.msys2.org/][~MSYS~]] is the easiest way to get ~gcc~ which is needed to compile the database for [[https://www.orgroam.com/][org-roam]].

This configuration makes use of an environment variable pointing to the root directory of org-roam, called ~ORGROAM~. Make sure to export this pointing to whatever directory should be used for it. If not using org-roam, setting ~ensure~ to ~nil~ in the following use-package sexp should do the trick.

For some of the config here - especially the journaling part, see the excellent content on the [[https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/][system crafters website]].
For the respective domain specific part of this config, the ~org-roam-dailies-directory~ can be set to a custom value. Its default is ~"daily"~ . Daily files will end up here. It is relative to the ~org-roam-directory~, i.e., something like this will determine the location of the dailies: ~(expand-file-name org-roam-dailies-directory org-roam-directory)~
#+begin_src elisp
  (defun buoso/get-org-roam-dir ()
    (let ((dir (getenv "ORGROAM")))
      (if (eq nil dir)
          (buoso/error "No environment variable 'ORGROAM' was found. Set one and start again.")
        (expand-file-name dir))))

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename (buoso/get-org-roam-dir)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    (setq org-roam-database-connector 'emacsql-sqlite))
  (use-package org-roam-ui
    :ensure t
    :after org-roam)
#+end_src

*** org-roam-bibtex
#+begin_src elisp
  ;; Do not call this outside of the `org-roam-bibtex' use-package section as it depends on this package.
  ;; From the doc of `orb-open-attached-file': CITEKEY must be a list for compatibility with `bibtex-completion'
  (defun buoso/orb-open-attached-file-wrapper ()
    "Only works in org-roam files wiht a 'ROAM_REFS' section containig a citekey that `orb-get-node-citekey' can grab.
  If there is no file attached, do so with `orb-note-actions'."
    (interactive)
    (orb-open-attached-file (list (orb-get-node-citekey))))
#+end_src

#+begin_src elisp
  (use-package org-roam-bibtex
    :ensure t
    :after org-roam
    :bind (("C-c b a" . orb-note-actions)
           ("C-c b i" . orb-insert-link)
           ("C-c b o" . buoso/orb-open-attached-file-wrapper))
    :config
    (require 'org-ref))
#+end_src

** org-ql
For this configuration it makes sense to set the directory of /org-ql/ (~org-directory~) to the default /org-roam/ directory (~org-roam-directory~) as this is the standard query directory. Consequently, it should only be initialized _after_ org-roam.
#+begin_src elisp
  (use-package org-ql
    :after org-roam
    :ensure t
    :custom
    (org-directory (file-truename (buoso/get-org-roam-dir))))
#+end_src

** eglot
#+begin_src elisp
  (use-package eglot
    :ensure t
    :config
    (if (buoso/file-exists-p 'buoso/omnisharp-server-location)
      (progn
        (add-to-list 'eglot-server-programs
                     `(csharp-mode . (,buoso/omnisharp-server-location "-lsp" "-stdio")))
        (setq eglot-connect-timeout 3000))
    (buoso/error "Omnisharp file not found!")))
#+end_src

** corfu
#+begin_src elisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-prefix 2)
    :init
    (global-corfu-mode)
    (corfu-history-mode))

  (use-package corfu-terminal
    :ensure t)
#+end_src

** vertico
#+begin_src elisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 35)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t))
#+end_src

*** vertico-posframe
#+begin_src elisp
  (use-package vertico-posframe
    :after vertico
    :ensure t
    :config
    (vertico-posframe-mode 1))
#+end_src

** marginalia
#+begin_src elisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode 1))
#+end_src

** orderless
#+begin_src elisp
  (use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind
    (("C-c p p" . 'projectile-switch-project))
    :config
    (setq projectile-indexing-method 'hybrid)
    (projectile-global-mode))
  (use-package ibuffer-projectile
    :ensure t)
#+end_src

** magit
#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src

** sly
#+begin_src elisp
  (use-package sly
    :ensure t)
#+end_src

** cider
#+begin_src elisp
  (use-package cider
    :ensure t)
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic))))
#+end_src

** icons
#+begin_src elisp
  (use-package all-the-icons
    :ensure t)
  (use-package all-the-icons-dired
    :ensure t)
  (use-package all-the-icons-ibuffer
    :ensure t)
#+end_src
#+begin_src emacs-lisp
  (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t))
  (setq all-the-icons-scale-factor 1)
  (all-the-icons-ibuffer-mode 1)
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src

** dired
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)))
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

** ispell
#+begin_src elisp
  (when (executable-find "hunspell")
    (setq ispell-program-name "hunspell"))
#+end_src

** ace-window & move window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    (("M-o" . 'ace-window)
     ("s-j" . 'windmove-left)
     ("s-;" . 'windmove-right)))
#+END_SRC

** sr-speedbar
#+begin_src elisp
  (use-package sr-speedbar
    :ensure t
    :init
    (lambda ()
      (display-line-numbers-mode -1)))
#+end_src

** neotree
See [[https://www.emacswiki.org/emacs/NeoTree][NeoTree Docs]]
Use icons for file and let the widht be altered.
#+begin_src emacs-lisp
  (setq neo-theme 'icons)
  (setq neo-window-fixed-size nil)
#+end_src

Jump to the current file node when neotree is opened.
#+begin_src emacs-lisp
  (setq neo-smart-open t)
#+end_src

# Change neotree when switching projectile project (~projectile-switch-project~)
#+begin_src emacs-lisp
  ;; (setq projectile-switch-project-action 'neotree-projectile-action)
#+end_src

** raibow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'lisp-mode-hook '(lambda ()
                                 (rainbow-delimiters-mode)
                                 (prettify-symbols-mode)
                                 (display-line-numbers-mode)))
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+end_src

** recentf
From [[https://www.youtube.com/watch?v=51eSeqcaikM]]
History of recent files
#+begin_src elisp
  (recentf-mode 1)
#+end_src

** savehist
Minibuffer history
#+begin_src elisp
  (setq history-length 10)
  (savehist-mode 1)
#+end_src

** saveplace
Jump back to where the cursor was before closing a file or emacs.
Adds lag when opening a file.
#+begin_src elisp
  (save-place-mode 1)
#+end_src

** COMMENT highlight symbol
#+begin_src elisp
  (global-set-key [(control f3)] 'highlight-symbol)
  (global-set-key [f3] 'highlight-symbol-next)
  (global-set-key [(shift f3)] 'highlight-symbol-prev)
  (global-set-key [(meta f3)] 'highlight-symbol-query-replace)
#+end_src

** origami
Show/hide text regions.
#+begin_src elisp
  (use-package origami
    :ensure t
    :bind
    (:map origami-mode-map
          ("C-c C-z" . 'origami-recursively-toggle-node)))
#+end_src

** org-present
#+begin_src elisp
  (defun buoso/org-present-mode-hook ()
    "Setup org-present-mode."
    (org-display-inline-images))

  (defun buoso/org-present-mode-hook-quit ()
    "Revert settings from buoso/org-present-mode-hook when leaving org-present-mode."
    (org-remove-inline-images))

  (use-package org-present
    :ensure t
    :hook ((org-present-mode . buoso/org-present-mode-hook)
           (org-present-mode-quit . buoso/org-present-mode-hook-quit)))
#+end_src

** plantuml
#+begin_src elisp
  (use-package plantuml-mode
    :ensure t
    :config
    (when (buoso/file-exists-p 'buoso/plantuml-jar-path)
      (setq plantuml-jar-path buoso/plantuml-jar-path)
      (setq org-plantuml-jar-path buoso/plantuml-jar-path))
    (setq plantuml-default-exec-mode 'jar)
    (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode)))
#+end_src

** ditaa
Set the path to the ditaa executable.
#+begin_src elisp
  (when (buoso/file-exists-p 'buoso/ditaa-jar-path)
    (setq org-ditaa-jar-path buoso/ditaa-jar-path))

  (when (buoso/file-exists-p 'buoso/ditaa-eps-jar-path)
    (setq org-ditaa-eps-jar-path buoso/ditaa-eps-jar-path))
#+end_src

** elfeed
#+begin_src elisp
    (use-package elfeed
      :ensure t
      :config
      (setq url-queue-timeout 30)
      (setq elfeed-feeds
            '(("https://www.scientificamerican.com/platform/syndication/rss/" scientificamerican)
              ;; ("https://www.nature.com/nature.rss" nature)
              ("https://www.nature.com/natcomputsci.rss" naturecomputation)
              ("https://www.nature.com/nphys.rss" naturephysics)
              ("https://www.nature.com/nphoton.rss" naturephoton)
              ("https://www.nature.com/nnano.rss" naturenano)
              ("https://onlinelibrary.wiley.com/feed/13652818/most-recent" microscopyjournal)
              ("https://herbsutter.com/feed/" herbsutter)
              ("https://sachachua.com/blog/category/emacs/feed/" emacsnews))))
#+end_src

** vundo
#+begin_src elisp
  (use-package vundo
    :ensure t)
#+end_src


* Languages
** C/C++
#+begin_src elisp
  (require 'cc-mode)
  (define-key c-mode-base-map (kbd "<f5>") 'compile)
  (define-key c-mode-base-map (kbd "<f6>") 'recompile)
  (add-hook 'c-mode-hook 'origami-mode)
  (add-hook 'c++-mode-hook 'origami-mode)
  (add-hook 'c++-mode-hook 'display-line-numbers-mode)
#+end_src

** common lisp
Check if the ~inferior-lisp-program~ variable is set. If not, try to default it to ~sbcl~
#+begin_src elisp
  (when (not (boundp 'inferior-lisp-program))
    (let ((sbcl (executable-find "sbcl")))
      (if sbcl
          (setq inferior-lisp-program sbcl)
        (buoso/error "No lisp compiler identified. Try install sbcl and check if it is in PATH."))))
#+end_src

** clojure
#+begin_src elisp
  (use-package clojure-mode
    :ensure t)
  (use-package clojure-mode-extra-font-locking
    :ensure t)
            
#+end_src
** C#
#+begin_src elisp
  (use-package csharp-mode
    :ensure t)
#+end_src
** latex
#+BEGIN_SRC emacs-lisp
  (use-package latex-math-preview
    :ensure t)
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
  #'TeX-revert-document-buffer)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))


  ;; for export purposes
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)


#+END_SRC

Remove the headline while exporting the content in the respective
subtree using the *ignore* tag.
#+BEGIN_SRC  emacs-lisp
  (ox-extras-activate '(ignore-headlines))
#+END_SRC

** pdf
#+begin_src elisp
  (use-package pdf-tools
    :ensure t
    ;; :hook
    ;; (pdf-view-mode . pdf-tools-enable-minor-modes)
    :config
    (add-hook 'pdf-view-mode-hook '(lambda () (pdf-tools-enable-minor-modes)))
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode)))
#+end_src

** cmake
#+begin_src elisp
  (use-package cmake-ide
    :ensure t)

  (use-package cmake-mode
    :ensure t)

#+end_src
** yaml
See [[https://melpa.org/#/yaml-mode]]
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

#+end_src
** json
#+begin_src elisp
  (use-package json-mode
    :ensure t)
  (use-package json-reformat
    :ensure t)
#+end_src
** python
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
    (setq elpy-rpc-python-command "python3")
    :hook
    (python-mode . 'origami-mode))
#+end_src

** makdown
From:
- [[https://jblevins.org/projects/markdown-mode/]]

#+begin_src elisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

** docker
#+begin_src elisp
  (use-package dockerfile-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** gnuplot
#+begin_src elisp
  (use-package gnuplot
    :ensure t)
  (use-package gnuplot-mode
    :ensure t)
#+end_src
* User functions
*Attention* when using interactive: the first character in the string
 for the interactive function determines the type of the value
 assigned to the argument provided. Multiple arguments in the
 top-level function must be seperated by "\n" characters.

** time-string conversions
#+BEGIN_SRC emacs-lisp
  (defun revert (l)
    "reverts a list"
    (cond
     ((null l) '())
     (t (append (revert (cdr l)) (list (car l))))))
  
  (defun time-to-list (s)
    "generates a list of numbers from :-separetd time string"
    (mapcar 'string-to-number (split-string s ":")))
  
  (defun multiply-lists (l mult acc)
    "multiplies each element of the lists and returns the sum of multiplied tuples"
    (cond
     ((null l) acc)
     (t (multiply-lists (cdr l) (cdr mult) (+ acc (* (car l) (car mult)))))))
  
  (defun make-seconds (s)
    "computes seconds form dd:hh:mm:ss time string" 
    (multiply-lists (revert (time-to-list s)) '(1 60 3600 86400) 0))
  
  (defun seconds-to-time-precise (s)
    "generate time in hh:mm:ss format from seconds"
    (let ((hr (mod s 3600)))
      (let ((mr (mod hr 60)))
        (concat
         (number-to-string (/ (- s hr) 3600))
         ":"
         (number-to-string (/ (- hr mr) 60))
         ":"
         (number-to-string mr)))))
  
  
  (defun minutes-to-time (s)
    "comma-separated minute-value to time mm:ss"
    (let ((f (floor s)))
      (concat
       (number-to-string f)
       ":"
       (number-to-string (round (* (- s f) 60))))))  
#+END_SRC

** Helpers
#+BEGIN_SRC emacs-lisp
  (defun psi-to-kgcm2 (psi)
    "pressure in psi to kg/cm²"
    (* 0.070307 psi))

  (defun psi-to-gcm2 (psi)
    "pressure in psi to g/cm²"
    (* (psi-to-kgcm2 psi) 1000))

  (defun rpm-to-ms (r rpm)
    "get speed in m/s from disk radius and rpm"
    (let ((u (* 2 pi r))
          (rps (/ rpm 60.0)))
      (* u rps)))

  (defun ms-to-rpm (r ms)
    "get rpm from disk radius and speed in m/s"
    (let ((u (* 2 pi r)))
      (let ((rps (/ ms u)))
        (* rps 60.0))))


  (defun round-to (n d)
    "round the number n to d specified decimals"
    (/ (fround (* (expt 10 d) n)) (expt 10 d)))

  (defun make-link (l)
    (cond
     ((< (length l) 3) (get-link l))
     ((not (equal (substring l 0 3) "[[*")) (get-link l))
     (t l)))

  (defun make-link-append-front (a l)
    (let ((to-link (concat a " " l)))
      (cond
       ((< (length l) 3)
        (get-link to-link))
       ((not (equal (substring l 0 3) "[[*")) 
        (get-link to-link))
       (t l))))

  (defun get-link (l)
    (concat "[[*" l "][" l "]]"))

  (defun a-to-nm (a)
    "convert Å to nm"
    (/ a 10.0))


  (defun nm-to-a (nm)
    "convert nm to Å"
    (* nm 10.0))
#+END_SRC

** Shortcuts
#+BEGIN_SRC emacs-lisp
  (defun inline-src-elisp (ex re)
    "With arguments EX for :exports and RE for :results generate base for src_elisp."

    (interactive "s:exports:\ns:results:")
    (let ((insertion (concat "src_elisp[:exports "
                       ex
                       " :results "
                       re
                       "]{}")))
      (insert insertion))
    (backward-char))
#+END_SRC

** Funciton Bindings
#+BEGIN_SRC emacs-lisp
  (fset 'to-num 'string-to-number)
  (global-set-key (kbd "M-s M-e") 'inline-src-elisp)
#+END_SRC






